name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          # Navigate to application directory
          cd /opt/ai-executive-suite
          
          # Pull latest code
          git pull origin develop
          
          # Update environment variables
          cp .env.staging .env
          
          # Pull latest Docker image
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop
          
          # Update docker-compose to use new image
          sed -i 's|build:|#build:|g' docker-compose.staging.yml
          sed -i 's|#image:|image:|g' docker-compose.staging.yml
          sed -i 's|ai-executive-suite:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop|g' docker-compose.staging.yml
          
          # Deploy with zero-downtime
          docker-compose -f docker-compose.staging.yml up -d --no-deps app1
          sleep 30
          docker-compose -f docker-compose.staging.yml up -d --no-deps app2
          sleep 30
          docker-compose -f docker-compose.staging.yml up -d --no-deps app3
          
          # Run health checks
          ./scripts/deploy/health-check.sh
          
          # Clean up old images
          docker image prune -f

    - name: Run staging tests
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/ai-executive-suite
          
          # Run smoke tests
          python scripts/test/smoke_tests.py --environment staging
          
          # Run API tests
          python scripts/test/api_tests.py --base-url https://staging.ai-executive-suite.com

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow