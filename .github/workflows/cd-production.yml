name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - rollback

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      if: github.event.inputs.environment != 'rollback'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create backup before deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/ai-executive-suite
          
          # Create pre-deployment backup
          docker-compose -f docker-compose.prod.yml exec -T backup-service python scripts/backup_service.py full_backup
          
          # Tag current deployment for potential rollback
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rollback-$(date +%Y%m%d-%H%M%S)

    - name: Deploy to production (Blue-Green)
      if: github.event.inputs.environment != 'rollback'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/ai-executive-suite
          
          # Pull latest code
          git pull origin main
          
          # Update environment variables
          cp .env.production .env
          
          # Pull latest Docker image
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Blue-Green deployment
          echo "Starting Blue-Green deployment..."
          
          # Deploy to green environment (app4, app5, app6)
          docker-compose -f docker-compose.prod.yml up -d app4 app5 app6
          
          # Wait for green environment to be ready
          sleep 60
          
          # Health check green environment
          for i in {1..10}; do
            if curl -f http://localhost:5003/health && curl -f http://localhost:5004/health && curl -f http://localhost:5005/health; then
              echo "Green environment is healthy"
              break
            fi
            echo "Waiting for green environment... ($i/10)"
            sleep 30
          done
          
          # Switch traffic to green environment
          cp nginx/nginx-green.conf nginx/nginx.conf
          docker-compose -f docker-compose.prod.yml exec nginx nginx -s reload
          
          # Wait and verify traffic switch
          sleep 30
          ./scripts/deploy/health-check.sh
          
          # Stop blue environment
          docker-compose -f docker-compose.prod.yml stop app1 app2 app3
          
          # Rename containers (green becomes blue)
          docker rename ai-executive-suite_app4_1 ai-executive-suite_app1_1
          docker rename ai-executive-suite_app5_1 ai-executive-suite_app2_1
          docker rename ai-executive-suite_app6_1 ai-executive-suite_app3_1
          
          # Update nginx config back to normal
          cp nginx/nginx-blue.conf nginx/nginx.conf
          docker-compose -f docker-compose.prod.yml exec nginx nginx -s reload
          
          echo "Blue-Green deployment completed successfully"

    - name: Rollback deployment
      if: github.event.inputs.environment == 'rollback'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/ai-executive-suite
          
          echo "Starting rollback procedure..."
          
          # Find latest rollback image
          ROLLBACK_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep rollback | head -1)
          
          if [ -z "$ROLLBACK_IMAGE" ]; then
            echo "No rollback image found"
            exit 1
          fi
          
          echo "Rolling back to: $ROLLBACK_IMAGE"
          
          # Update docker-compose to use rollback image
          sed -i "s|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|$ROLLBACK_IMAGE|g" docker-compose.prod.yml
          
          # Deploy rollback version
          docker-compose -f docker-compose.prod.yml up -d --no-deps app1 app2 app3
          
          # Health check
          sleep 60
          ./scripts/deploy/health-check.sh
          
          echo "Rollback completed successfully"

    - name: Run production smoke tests
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/ai-executive-suite
          
          # Run critical path tests
          python scripts/test/smoke_tests.py --environment production --critical-only
          
          # Test key API endpoints
          python scripts/test/api_tests.py --base-url https://ai-executive-suite.com --critical-only

    - name: Update monitoring and alerting
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/ai-executive-suite
          
          # Update deployment metadata
          echo "DEPLOYMENT_VERSION=${{ github.sha }}" >> .env
          echo "DEPLOYMENT_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> .env
          
          # Restart monitoring services to pick up new version
          docker-compose -f docker-compose.prod.yml restart monitoring-agent

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "Production Deployment ${{ job.status }}",
            "attachments": [{
              "color": "${{ job.status }}" === "success" ? "good" : "danger",
              "fields": [{
                "title": "Environment",
                "value": "${{ github.event.inputs.environment || 'production' }}",
                "short": true
              }, {
                "title": "Version",
                "value": "${{ github.sha }}",
                "short": true
              }]
            }]
          }