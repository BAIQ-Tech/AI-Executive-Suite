version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - app1
      - app2
      - app3
    restart: unless-stopped
    networks:
      - app-network

  # Application Instances
  app1:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://ai_exec_user:${DB_PASSWORD}@postgres-primary:5432/ai_executive_suite
      - REDIS_URL=redis://redis-cluster:6379/0
      - INSTANCE_ID=app1
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - postgres-primary
      - redis-cluster
    restart: unless-stopped
    networks:
      - app-network

  app2:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://ai_exec_user:${DB_PASSWORD}@postgres-primary:5432/ai_executive_suite
      - REDIS_URL=redis://redis-cluster:6379/0
      - INSTANCE_ID=app2
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - postgres-primary
      - redis-cluster
    restart: unless-stopped
    networks:
      - app-network

  app3:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://ai_exec_user:${DB_PASSWORD}@postgres-primary:5432/ai_executive_suite
      - REDIS_URL=redis://redis-cluster:6379/0
      - INSTANCE_ID=app3
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      - postgres-primary
      - redis-cluster
    restart: unless-stopped
    networks:
      - app-network

  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15
    environment:
      - POSTGRES_DB=ai_executive_suite
      - POSTGRES_USER=ai_exec_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${REPLICATION_PASSWORD}
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./postgres/init-replication.sql:/docker-entrypoint-initdb.d/init-replication.sql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    networks:
      - app-network

  # PostgreSQL Read Replica
  postgres-replica:
    image: postgres:15
    environment:
      - POSTGRES_DB=ai_executive_suite
      - POSTGRES_USER=ai_exec_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGUSER=postgres
      - POSTGRES_PRIMARY_HOST=postgres-primary
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${REPLICATION_PASSWORD}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./postgres/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh
    depends_on:
      - postgres-primary
    restart: unless-stopped
    networks:
      - app-network

  # Redis Cluster
  redis-cluster:
    image: redis:7-alpine
    command: redis-server --appendonly yes --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

  # Backup Service
  backup-service:
    build:
      context: .
      dockerfile: Dockerfile.backup
    environment:
      - DATABASE_URL=postgresql://ai_exec_user:${DB_PASSWORD}@postgres-primary:5432/ai_executive_suite
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./backups:/app/backups
      - ./uploads:/app/uploads
    depends_on:
      - postgres-primary
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_primary_data:
  postgres_replica_data:
  redis_data:

networks:
  app-network:
    driver: bridge